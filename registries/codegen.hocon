{
    "llm_config": {
        "model_name": "gemini-2.0-flash"
    },
    "max_iterations": 100,
    "max_execution_seconds": 300,
    "enable_internal_chat": true,
    "enable_visualization": true,
    "tools": [
        # Front Man Agent - Coordinates the code generation process
        {
            "name": "orchestrator",
            "function": {
                "description": "Orchestrates the entire code generation process, from reading design documents to writing the final code to files.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "hld_file_path": {
                            "type": "string",
                            "description": "File path to the High Level Design document"
                        },
                        "lld_file_path": {
                            "type": "string",
                            "description": "File path to the Low Level Design document"
                        },
                        "project_name": {
                            "type": "string",
                            "description": "Name of the project"
                        }
                    },
                    "required": ["hld_file_path", "lld_file_path", "project_name"]
                }
            },
            "instructions": """
                You are the master Orchestrator for code generation. Your role is to manage the entire workflow from start to finish.

                ## EXECUTION PHASES:

                ### PHASE 1 - ANALYSIS & PLANNING:
                1. Read and validate HLD and LLD documents using the read_file tool.
                2. Extract key requirements, architecture, and technical specifications.
                3. Break down requirements into a manifest of logical components/files to be created.
                4. Determine the correct generation sequence.

                ### PHASE 2 - CODE GENERATION & WRITING (SEQUENTIAL):
                5. For each component in your manifest, do the following one-by-one:
                   a. Call the code_generator agent with clear specifications for that single component.
                   b. Receive the raw code string as a response from the code_generator.
                   c. **IMMEDIATELY call the file_writer tool** to save the received code string to its designated file path.
                   d. Verify the file_writer tool returns a "success" status before proceeding to the next component.

                ### PHASE 3 - DELIVERY & REPORTING:
                6. Once all components are generated and saved, create a final README.md or summary document.
                7. Report the final status, including a list of all files that were successfully created.

                CRITICAL: You are responsible for writing files. The code_generator will ONLY provide you with code. You MUST call file_writer yourself.
                """,
            "tools": ["code_generator", "read_file", "file_writer"]
        },

        # Code Generator Agent - Generates code based on specifications
        {
            "name": "code_generator",
            "function": {
                "description": "Generates clean, functional code based on specifications and returns it as a string. This agent does NOT write files.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "component_name": {
                            "type": "string",
                            "description": "Name of the component being implemented"
                        },
                        "specifications": {
                            "type": "string",
                            "description": "Detailed specifications for the code to be generated"
                        },
                        "programming_language": {
                            "type": "string",
                            "description": "Target programming language for code generation"
                        }
                    },
                    "required": ["component_name", "specifications", "programming_language"]
                }
            },
            "instructions": """
                You are a pure Code Generator. Your ONLY job is to generate high-quality, complete, and functional code based on the specifications provided.

                ## Your Responsibilities:
                1. Analyze the specifications.
                2. Write complete, runnable code including all necessary imports, comments, and error handling.
                3. Return the generated code as a single, raw string.

                ## CRITICAL OUTPUT FORMATTING:
                - **Your response MUST be ONLY the raw code.**
                - **DO NOT** include any explanations, introductory text, or conversational phrases.
                - **DO NOT** wrap the code in markdown code fences like ``````.

                ### Example:
                - **WRONG:** ``````
                - **CORRECT:** const x = 1;

                Your entire output must be the raw code, ready to be saved directly into a file.
                """,
            "tools": []
        },

        # File Reading Tool
        {
            "name": "read_file",
            "function": {
                "description": "Reads the contents of a file from the local filesystem.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "Path to the file to read"
                        },
                        "start_line": {
                            "type": "int",
                            "description": "Starting line number (1-based)",
                            "default": 1
                        },
                        "end_line": {
                            "type": "int",
                            "description": "Ending line number (inclusive)",
                            "default": None
                        }
                    },
                    "required": ["file_path"]
                }
            },
            "class": "file_operations.file_reader.FileReader"
        },

        # File Writing Tool
        {
            "name": "file_writer",
            "function": {
                "description": "Writes content to a file on the local filesystem.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "file_path": {
                            "type": "string",
                            "description": "Path where the file should be written"
                        },
                        "content": {
                            "type": "string",
                            "description": "Content to write to the file"
                        },
                        "mode": {
                            "type": "string",
                            "description": "File mode ('w' for write, 'a' for append)",
                            "enum": ["w", "a", "w+", "a+"],
                            "default": "w"
                        },
                        "encoding": {
                            "type": "string",
                            "description": "File encoding to use",
                            "default": "utf-8"
                        },
                        "create_dirs": {
                            "type": "boolean",
                            "description": "Create parent directories if they don't exist",
                            "default": true
                        }
                    },
                    "required": ["file_path", "content"]
                }
            },
            "class": "file_operations.file_writer.FileWriter"
        }
    ]
}